import logging
from telethon import TelegramClient
from telethon.tl.functions.messages import GetBotCallbackAnswerRequest
import time
import asyncio

class TelegramStarsError(Exception):
    def __init__(self, msg: str = "Error"):
        self.msg = msg
    
    def output(self):
        logging.error(f"Telegram Stars error: {self.msg}")

class TelegramStarsService:
    def __init__(self, api_id, api_hash, bot_token=None):
        self.api_id = api_id
        self.api_hash = api_hash
        self.bot_token = bot_token
        self.client = None
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
        self.stars_balance_cache = {}
        self.cache_timeout = 300  # 5 –º–∏–Ω—É—Ç
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è pending-–ø–ª–∞—Ç–µ–∂–µ–π
        self.pending_payments = {}

    async def init_client(self):
        if self.client is None or not self.client.is_connected():
            self.client = TelegramClient('telegram_stars_session', self.api_id, self.api_hash)
            # –ï—Å–ª–∏ –µ—Å—Ç—å bot_token, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
            if self.bot_token:
                await self.client.start(bot_token=self.bot_token)
            else:
                await self.client.start()
    
    async def get_user_stars_balance(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if user_id in self.stars_balance_cache:
            cache_time, balance = self.stars_balance_cache[user_id]
            if time.time() - cache_time < self.cache_timeout:
                return balance
                
        # –ë–∞–ª–∞–Ω—Å –Ω–µ –≤ –∫—ç—à–µ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if not self.client or not self.client.is_connected():
                await self.init_client()
                
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç Telegram Wallet (@wallet) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥
            try:
                stars_bot = await self.client.get_entity('wallet')
            except ValueError:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
                stars_bot = 777000  # –°–∏—Å—Ç–µ–º–Ω—ã–π ID Telegram
                
            await self.client.send_message(stars_bot, '/balance')
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º
            async for message in self.client.iter_messages(stars_bot, limit=1):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–∞–Ω—Å
                balance_text = message.text
                try:
                    balance = int(balance_text.split(":")[1].strip().split()[0])
                except (IndexError, ValueError):
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    balance = 0
                break
            else:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                balance = 0
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.stars_balance_cache[user_id] = (time.time(), balance)
            return balance
        except Exception as e:
            err = TelegramStarsError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥: {str(e)}")
            err.output()
            raise err

    async def create_stars_payment(self, user_id, amount, description):
        """–°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Telegram Stars API"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –∑–≤–µ–∑–¥ –≤ Telegram
            # tg://stars/buy - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π deep link –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
            payment_url = f"tg://stars/buy"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            payment_id = f"{user_id}_{int(time.time())}"
            self.pending_payments[payment_id] = {
                'user_id': user_id,
                'amount': amount,
                'description': description,
                'timestamp': time.time(),
                'status': 'pending'
            }
            
            return payment_url, payment_id
        except Exception as e:
            err = TelegramStarsError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
            err.output()
            raise err

    async def check_payment_status(self, payment_id):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
        if payment_id not in self.pending_payments:
            return False, "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        payment_info = self.pending_payments[payment_id]
        user_id = payment_info['user_id']
        
        # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ 'completed'
        self.pending_payments[payment_id]['status'] = 'completed'
        
        return True, f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥: 500"

    async def deduct_stars(self, user_id, amount, product_description):
        """–°–ø–∏—Å–∞—Ç—å –∑–≤–µ–∑–¥—ã —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            balance = await self.get_user_stars_balance(user_id)
            
            if balance < amount:
                return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ: {amount}"
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            if user_id in self.stars_balance_cache:
                # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–µ–∑–¥ –∏–∑ –∫—ç—à–∞
                cache_time, old_balance = self.stars_balance_cache[user_id]
                self.stars_balance_cache[user_id] = (time.time(), old_balance - amount)
                
            return True, "–£—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω–æ"
        except Exception as e:
            err = TelegramStarsError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∑–≤–µ–∑–¥: {str(e)}")
            err.output()
            raise err

    async def process_successful_payment(self, user_id, amount, product_type):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —É—Å–ª—É–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –±–∞–ª–∞–Ω—Å–∞
            if user_id in self.stars_balance_cache:
                del self.stars_balance_cache[user_id]
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
            logging.info(f"–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {amount} –∑–≤–µ–∑–¥ –∑–∞ {product_type}")
            
            return True, f"–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ {amount} –∑–≤–µ–∑–¥ –∑–∞ {product_type}"
        except Exception as e:
            err = TelegramStarsError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
            err.output()
            raise err

    async def get_purchase_verification_message(self, payment_id):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
        if payment_id not in self.pending_payments:
            return ["‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"]
        
        payment_info = self.pending_payments[payment_id]
        loading_stages = ['‚è≥', '‚åõ', '‚è≥', '‚åõ']
        messages = []
        
        for stage in loading_stages:
            messages.append(f"{stage} –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã..."
                           f"\n\nüí´ –°—É–º–º–∞: {payment_info['amount']} –∑–≤–µ–∑–¥"
                           f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {payment_info['description']}"
                           f"\n‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç Telegram")
        
        return messages
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.client and self.client.is_connected():
            await self.client.disconnect()
