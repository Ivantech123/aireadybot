from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from app.bot.utils import States, TelegramError
from app.services.db import DataBase, DatabaseError

class ReferralHandlers:
    def __init__(self, database: DataBase):
        self.database = database
        # –ë–æ–Ω—É—Å—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        self.referral_bonuses = {
            'chatgpt': 5000,  # —Ç–æ–∫–µ–Ω–æ–≤
            'dall_e': 5,     # –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
            'stable': 5,     # –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
            'midjourney': 5  # –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        }
    
    async def show_referral_program_handler(self, message: Message, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        try:
            user_id = message.from_user.id
            bot_username = (await message.bot.get_me()).username
            referral_link = f"https://t.me/{bot_username}?start=ref{user_id}"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            referrals = await self.database.get_referrals(user_id)
            
            message_text = "ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞\n\n"
            message_text += "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –≤ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\n"
            message_text += "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–Ω–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            message_text += f"üí¨ +{self.referral_bonuses['chatgpt']} —Ç–æ–∫–µ–Ω–æ–≤ ChatGPT\n"
            message_text += f"üåÑ +{self.referral_bonuses['dall_e']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π DALL¬∑E\n"
            message_text += f"üåÖ +{self.referral_bonuses['stable']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π Stable Diffusion\n"
            message_text += f"üñº +{self.referral_bonuses['midjourney']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π MidJourney\n\n"
            
            message_text += f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{referral_link}\n\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            message_text += f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(referrals)}\n"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", callback_data="show_referrals_list")],
                [InlineKeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", switch_inline_query=f"–ü–æ–ø—Ä–æ–±—É–π –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ —Å –ò–ò! {referral_link}")]
            ])
            
            await message.answer(message_text, reply_markup=keyboard)
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            raise err
    
    async def show_referrals_list_handler(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await callback_query.answer()
            
            user_id = callback_query.from_user.id
            referrals = await self.database.get_referrals(user_id)
            
            if not referrals:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_referral_program")]
                ])
                
                await callback_query.message.edit_text(
                    "üë• –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n"
                    "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã!",
                    reply_markup=keyboard
                )
                return
            
            message_text = "üë• –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n"
            
            for i, referral in enumerate(referrals, 1):
                referred_id = referral[0]
                joined_date = referral[1].strftime("%d.%m.%Y")
                bonus_given = "‚úÖ" if referral[2] else "‚è≥"
                
                message_text += f"{i}. ID: {referred_id} | –î–∞—Ç–∞: {joined_date} | –ë–æ–Ω—É—Å: {bonus_given}\n"
            
            message_text += "\n‚úÖ - –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω, ‚è≥ - –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ\n"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_referral_program")]
            ])
            
            await callback_query.message.edit_text(message_text, reply_markup=keyboard)
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            raise err
    
    async def back_to_referral_program_handler(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        try:
            await callback_query.answer()
            await self.show_referral_program_handler(callback_query.message, state)
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            raise err
    
    async def process_referral_start(self, message: Message, referrer_id: int, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ"""
        try:
            user_id = message.from_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º —Å–µ–±—è
            if user_id == referrer_id:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Ñ–µ—Ä—Ä–µ—Ä
            referrer_exists = await self.database.is_user(referrer_id)
            if not referrer_exists:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
            user_exists = await self.database.is_user(user_id)
            
            if not user_exists:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å referrer_id
                await self.database.insert_user(user_id, referrer_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                try:
                    await message.bot.send_message(
                        referrer_id,
                        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.\n"
                        f"–°–∫–æ—Ä–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!"
                    )
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä—Ä–µ—Ä—É, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                    pass
                
                return True
            
            return False
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            return False
