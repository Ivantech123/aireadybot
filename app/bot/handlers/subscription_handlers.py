from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from app.bot.utils import States, TelegramError
from app.services.db import DataBase, DatabaseError
from app.services.telegram_stars import TelegramStarsService, TelegramStarsError

class SubscriptionHandlers:
    def __init__(self, database: DataBase, telegram_stars: TelegramStarsService):
        self.database = database
        self.telegram_stars = telegram_stars
        # —É„Éó„É¨–¥–µ–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
        self.chat_plans = {
            "starter": {
                "name": "–°—Ç–∞—Ä—Ç–æ–≤—ã–π",
                "price": 100,  # –∑–≤–µ–∑–¥
                "daily_limit": 20,  # —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å
                "duration": 7,  # –¥–Ω–µ–π
                "description": "+20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 7 –¥–Ω–µ–π"
            },
            "advanced": {
                "name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
                "price": 250,  # –∑–≤–µ–∑–¥
                "daily_limit": 50,  # —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å
                "duration": 14,  # –¥–Ω–µ–π
                "description": "+50 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 14 –¥–Ω–µ–π"
            },
            "expert": {
                "name": "–≠–∫—Å–ø–µ—Ä—Ç",
                "price": 450,  # –∑–≤–µ–∑–¥
                "daily_limit": 999999,  # –±–µ–∑–ª–∏–º–∏—Ç
                "duration": 30,  # –¥–Ω–µ–π
                "description": "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π"
            }
        }
        
        self.image_plans = {
            "mini": {
                "name": "–ú–∏–Ω–∏",
                "price": 80,  # –∑–≤–µ–∑–¥
                "daily_limit": 5,  # –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ –¥–µ–Ω—å
                "duration": 7,  # –¥–Ω–µ–π
                "description": "+5 –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ –¥–µ–Ω—å\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 7 –¥–Ω–µ–π"
            },
            "standard": {
                "name": "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
                "price": 180,  # –∑–≤–µ–∑–¥
                "daily_limit": 15,  # –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ –¥–µ–Ω—å
                "duration": 14,  # –¥–Ω–µ–π
                "description": "+15 –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ –¥–µ–Ω—å\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 14 –¥–Ω–µ–π"
            },
            "maximum": {
                "name": "–ú–∞–∫—Å–∏–º—É–º",
                "price": 350,  # –∑–≤–µ–∑–¥
                "daily_limit": 30,  # –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ –¥–µ–Ω—å
                "duration": 30,  # –¥–Ω–µ–π
                "description": "+30 –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ –¥–µ–Ω—å\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π"
            }
        }

    async def show_subscriptions_handler(self, message: Message, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–¥–ø–∏—Å–æ–∫"""
        try:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí¨ –¢–∞—Ä–∏—Ñ—ã –¥–ª—è —á–∞—Ç–∞", callback_data="show_chat_plans")],
                [InlineKeyboardButton(text="üñº –¢–∞—Ä–∏—Ñ—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫", callback_data="show_image_plans")],
                [InlineKeyboardButton(text="üí´ –ú–æ–π –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥", callback_data="stars_balance")]
            ])
            
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:",
                reply_markup=keyboard
            )
            await state.set_state(States.SUBSCRIPTION_STATE)
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            raise err

    async def show_chat_plans_handler(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è —á–∞—Ç–∞"""
        try:
            await callback_query.answer()
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"¬´{self.chat_plans['starter']['name']}¬ª ‚Äî {self.chat_plans['starter']['price']} –∑–≤—ë–∑–¥", 
                    callback_data="buy_chat_starter"
                )],
                [InlineKeyboardButton(
                    text=f"¬´{self.chat_plans['advanced']['name']}¬ª ‚Äî {self.chat_plans['advanced']['price']} –∑–≤—ë–∑–¥", 
                    callback_data="buy_chat_advanced"
                )],
                [InlineKeyboardButton(
                    text=f"¬´{self.chat_plans['expert']['name']}¬ª ‚Äî {self.chat_plans['expert']['price']} –∑–≤—ë–∑–¥", 
                    callback_data="buy_chat_expert"
                )],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_subscriptions")]
            ])
            
            message_text = "üí¨ –¢–∞—Ä–∏—Ñ—ã –¥–ª—è —á–∞—Ç–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã):\n\n"
            for plan_id, plan in self.chat_plans.items():
                message_text += f"¬´{plan['name']}¬ª ‚Äî {plan['price']} –∑–≤—ë–∑–¥\n{plan['description']}\n\n"
            
            await callback_query.message.edit_text(
                message_text,
                reply_markup=keyboard
            )
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            raise err

    async def show_image_plans_handler(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫"""
        try:
            await callback_query.answer()
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"¬´{self.image_plans['mini']['name']}¬ª ‚Äî {self.image_plans['mini']['price']} –∑–≤—ë–∑–¥", 
                    callback_data="buy_image_mini"
                )],
                [InlineKeyboardButton(
                    text=f"¬´{self.image_plans['standard']['name']}¬ª ‚Äî {self.image_plans['standard']['price']} –∑–≤—ë–∑–¥", 
                    callback_data="buy_image_standard"
                )],
                [InlineKeyboardButton(
                    text=f"¬´{self.image_plans['maximum']['name']}¬ª ‚Äî {self.image_plans['maximum']['price']} –∑–≤—ë–∑–¥", 
                    callback_data="buy_image_maximum"
                )],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_subscriptions")]
            ])
            
            message_text = "üñº –¢–∞—Ä–∏—Ñ—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫:\n\n"
            for plan_id, plan in self.image_plans.items():
                message_text += f"¬´{plan['name']}¬ª ‚Äî {plan['price']} –∑–≤—ë–∑–¥\n{plan['description']}\n\n"
            
            await callback_query.message.edit_text(
                message_text,
                reply_markup=keyboard
            )
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            raise err

    async def back_to_subscriptions_handler(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            await callback_query.answer()
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí¨ –¢–∞—Ä–∏—Ñ—ã –¥–ª—è —á–∞—Ç–∞", callback_data="show_chat_plans")],
                [InlineKeyboardButton(text="üñº –¢–∞—Ä–∏—Ñ—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫", callback_data="show_image_plans")],
                [InlineKeyboardButton(text="üí´ –ú–æ–π –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥", callback_data="stars_balance")]
            ])
            
            await callback_query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:",
                reply_markup=keyboard
            )
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            raise err

    async def buy_subscription_handler(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            await callback_query.answer()
            
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = callback_query.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞–Ω–µ –∏–∑ callback_data
            callback_data = callback_query.data
            plan_type, plan_id = callback_data.replace('buy_', '').split('_')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
            if plan_type == 'chat':
                plan = self.chat_plans[plan_id]
                sub_type = "chat"
            else:  # plan_type == 'image'
                plan = self.image_plans[plan_id]
                sub_type = "image"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            stars_balance = await self.telegram_stars.get_user_stars_balance(user_id)
            
            if stars_balance < plan['price']:
                # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí∏ –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", url="tg://stars/buy")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"show_{plan_type}_plans")]
                ])
                
                await callback_query.message.edit_text(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–∞—Ä–∏—Ñ–∞ ¬´{plan['name']}¬ª.\n\n" \
                    f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {stars_balance} üí´\n" \
                    f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {plan['price']} üí´\n\n" \
                    f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                    reply_markup=keyboard
                )
                return
            
            # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å–∞ —Ö–≤–∞—Ç–∞–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úîÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{plan_type}_{plan_id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"show_{plan_type}_plans")]
            ])
            
            await callback_query.message.edit_text(
                f"üí´ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏\n\n" \
                f"–¢–∞—Ä–∏—Ñ: ¬´{plan['name']}¬ª\n" \
                f"–¶–µ–Ω–∞: {plan['price']} –∑–≤—ë–∑–¥\n" \
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {plan['description']}\n\n" \
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {stars_balance} üí´\n" \
                f"–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏: {stars_balance - plan['price']} üí´\n\n" \
                f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:",
                reply_markup=keyboard
            )
        except TelegramStarsError:
            raise TelegramStarsError
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            raise err

    async def confirm_subscription_handler(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            await callback_query.answer()
            
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = callback_query.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞–Ω–µ –∏–∑ callback_data
            callback_data = callback_query.data
            plan_type, plan_id = callback_data.replace('confirm_', '').split('_')
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
            if plan_type == 'chat':
                plan = self.chat_plans[plan_id]
                sub_type = "chat"
            else:  # plan_type == 'image'
                plan = self.image_plans[plan_id]
                sub_type = "image"
            
            # –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤–µ–∑–¥—ã —á–µ—Ä–µ–∑ API
            success, message = await self.telegram_stars.deduct_stars(
                user_id, 
                plan['price'], 
                f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ ¬´{plan['name']}¬ª ({sub_type})"
            )
            
            if not success:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"show_{plan_type}_plans")]
                ])
                
                await callback_query.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∑–≤–µ–∑–¥: {message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=keyboard
                )
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.database.create_subscription(
                user_id,
                sub_type,
                plan_id,
                plan['daily_limit'],
                plan['duration']
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Ç–∞—Ä–∏—Ñ–∞–º", callback_data=f"show_{plan_type}_plans")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
            
            await callback_query.message.edit_text(
                f"‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ç–∞—Ä–∏—Ñ ¬´{plan['name']}¬ª.\n\n" \
                f"–¢–∏–ø: {sub_type.capitalize()}\n" \
                f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ª–∏–º–∏—Ç: {plan['daily_limit'] if plan['daily_limit'] < 999999 else '–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ'}\n" \
                f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {plan['duration']} –¥–Ω–µ–π\n\n" \
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! üöÄ",
                reply_markup=keyboard
            )
        except DatabaseError:
            raise DatabaseError
        except TelegramStarsError:
            raise TelegramStarsError
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            raise err

    async def check_subscription_status_handler(self, message: Message, state: FSMContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = message.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_sub = await self.database.check_subscription(user_id, "chat")
            image_sub = await self.database.check_subscription(user_id, "image")
            
            message_text = "üìä –°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:\n\n"
            
            if chat_sub:
                plan_id = chat_sub['plan']
                plan_name = self.chat_plans[plan_id]['name'] if plan_id in self.chat_plans else plan_id.capitalize()
                end_date = chat_sub['end_date'].strftime("%d.%m.%Y")
                
                message_text += f"üí¨ –ß–∞—Ç: –¢–∞—Ä–∏—Ñ ¬´{plan_name}¬ª\n" \
                               f"–õ–∏–º–∏—Ç: {chat_sub['daily_limit']} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å\n" \
                               f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {chat_sub['usage_today']}\n" \
                               f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date}\n\n"
            else:
                message_text += "üí¨ –ß–∞—Ç: –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"
            
            if image_sub:
                plan_id = image_sub['plan']
                plan_name = self.image_plans[plan_id]['name'] if plan_id in self.image_plans else plan_id.capitalize()
                end_date = image_sub['end_date'].strftime("%d.%m.%Y")
                
                message_text += f"üñº –ö–∞—Ä—Ç–∏–Ω–∫–∏: –¢–∞—Ä–∏—Ñ ¬´{plan_name}¬ª\n" \
                               f"–õ–∏–º–∏—Ç: {image_sub['daily_limit']} –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ –¥–µ–Ω—å\n" \
                               f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {image_sub['usage_today']}\n" \
                               f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date}\n\n"
            else:
                message_text += "üñº –ö–∞—Ä—Ç–∏–Ω–∫–∏: –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="show_subscriptions")],
                [InlineKeyboardButton(text="‚≠êÔ∏è –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥", url="tg://stars/buy")]
            ])
            
            await message.answer(message_text, reply_markup=keyboard)
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            raise err

    async def stars_balance_handler(self, callback_query: types.CallbackQuery):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await callback_query.answer()
            user_id = callback_query.from_user.id
            balance = await self.telegram_stars.get_user_stars_balance(user_id)
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚≠êÔ∏è –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", url="tg://stars/buy")],
                [InlineKeyboardButton(text="üîô –ö –ø–æ–¥–ø–∏—Å–∫–∞–º", callback_data="back_to_subscriptions")]
            ])
            
            await callback_query.message.edit_text(
                f"üí´ –í–∞—à –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥ Telegram: {balance} ‚≠êÔ∏è\n\n" \
                f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Telegram.",
                reply_markup=keyboard
            )
        except TelegramStarsError:
            raise TelegramStarsError
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            raise err
