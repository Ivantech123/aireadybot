from aiogram import types
from aiogram.types import LabeledPrice, Message, PreCheckoutQuery
from aiogram.fsm.context import FSMContext
from app.bot.utils import States, TelegramError
from app.services.db import DataBase, DatabaseError
from app.services.telegram_stars import TelegramStarsService, TelegramStarsError

class TelegramStarsHandlers:
    def __init__(self, database: DataBase, telegram_stars: TelegramStarsService):
        self.database = database
        self.telegram_stars = telegram_stars
        
    async def send_invoice_handler(self, message: Message, state: FSMContext):
        try:
            user_id = message.from_user.id
            current_state = await state.get_state()
            
            title = ""
            description = ""
            amount = 0
            product_type = ""
            
            if current_state == States.PURCHASE_CHATGPT_STATE:
                title = "100K ChatGPT —Ç–æ–∫–µ–Ω–æ–≤"
                description = "–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ 100K —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è ChatGPT"
                amount = 20  # –¶–µ–Ω–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö
                product_type = "chatgpt"
            elif current_state == States.PURCHASE_DALL_E_STATE:
                title = "50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π DALL¬∑E"
                description = "–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ 50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π DALL¬∑E"
                amount = 20  # –¶–µ–Ω–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö
                product_type = "dall_e"
            elif current_state == States.PURCHASE_STABLE_STATE:
                title = "50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π Stable Diffusion"
                description = "–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ 50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Stable Diffusion"
                amount = 20  # –¶–µ–Ω–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö
                product_type = "stable"
            elif current_state == States.PURCHASE_MIDJOURNEY_STATE:
                title = "50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π MidJourney"
                description = "–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ 50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π MidJourney"
                amount = 20  # –¶–µ–Ω–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö
                product_type = "midjourney"
            
            prices = [LabeledPrice(label="XTR", amount=amount)]
            await message.answer_invoice(
                title=title,
                description=description,
                prices=prices,
                provider_token="",  # –î–ª—è Telegram Stars –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                payload=product_type,
                currency="XTR",
                reply_markup=self.get_payment_keyboard(amount),
            )
        except TelegramStarsError:
            raise TelegramStarsError
        except DatabaseError:
            raise DatabaseError
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            raise err
            
    async def pre_checkout_handler(self, pre_checkout_query: PreCheckoutQuery):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –µ—ë
            await pre_checkout_query.answer(ok=True)
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            raise err
            
    async def success_payment_handler(self, message: Message):
        try:
            user_id = message.from_user.id
            payment_info = message.successful_payment
            product_type = payment_info.invoice_payload
            telegram_payment_charge_id = payment_info.telegram_payment_charge_id
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
            await self.process_successful_payment(user_id, product_type)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            product_name = {
                "chatgpt": "100K ChatGPT —Ç–æ–∫–µ–Ω–æ–≤",
                "dall_e": "50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π DALL¬∑E",
                "stable": "50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π Stable Diffusion",
                "midjourney": "50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π MidJourney"
            }.get(product_type, "—Ç–æ–≤–∞—Ä")
            
            await message.answer(f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {product_name}.")
        except DatabaseError:
            raise DatabaseError
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            raise err
            
    async def process_successful_payment(self, user_id: int, product_type: str):
        try:
            if product_type == "chatgpt":
                await self.database.update_chatgpt(user_id, 0)  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º invoice_id
            elif product_type == "dall_e":
                await self.database.update_dalle(user_id, 0)  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º invoice_id
            elif product_type == "stable":
                await self.database.update_stable(user_id, 0)  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º invoice_id
            elif product_type == "midjourney":
                await self.database.update_midjourney(user_id, 0)  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º invoice_id
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            raise err
            
    def get_payment_keyboard(self, amount):
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        builder.button(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} ‚≠êÔ∏è", pay=True)
        return builder.as_markup()
    
    async def stars_menu_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é –∑–≤–µ–∑–¥ Telegram"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
            button1 = types.KeyboardButton(text="üîç 100K ChatGPT tokens - 20 stars")
            button2 = types.KeyboardButton(text="üåÑ 50 DALL¬∑E image generations - 20 stars")
            button3 = types.KeyboardButton(text="üåÖ 50 Stable Diffusion image generations - 20 stars")
            button4 = types.KeyboardButton(text="üñºÔ∏è 50 MidJourney image generations - 20 stars")
            button5 = types.KeyboardButton(text="üîéCheck balance")
            button6 = types.KeyboardButton(text="üîôBack")
            
            keyboard = types.ReplyKeyboardMarkup(keyboard=[[button1], [button2], [button3], [button4], [button5], [button6]], resize_keyboard=True)

            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥
            user_id = message.from_user.id
            stars_balance = await self.telegram_stars.get_user_stars_balance(user_id)
            
            await message.answer(
                f"üí´ Your stars balance: *{stars_balance}* stars\n\n"
                f"You can buy Telegram Stars by clicking the button below to open the purchase page:\n\n"
                f"üëâ [Buy stars](tg://stars/buy) üëà\n\n"
                f"Or select an item to purchase:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
            await state.set_state(States.TELEGRAM_STARS_MENU_STATE)
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            await message.answer(f"Error loading stars menu: {str(e)}")

    async def check_stars_balance(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥"""
        try:
            user_id = message.from_user.id
            stars_balance = await self.telegram_stars.get_user_stars_balance(user_id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                text="üõçÔ∏è Buy stars", 
                url="tg://stars/buy"
            ))
            
            await message.answer(
                f"üí´ *Your stars balance: {stars_balance} stars*\n\n"
                f"You can use stars to purchase tokens and image generations.\n"
                f"Need more stars? Click the button below.", 
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            await message.answer(f"Error checking stars balance: {str(e)}")

    async def stars_balance_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /stars"""
        await self.check_stars_balance(message, state)

    async def buy_stars_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /buy"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                text="üõçÔ∏è Buy Telegram Stars", 
                url="tg://stars/buy"
            ))
            
            await message.answer(
                f"üõçÔ∏è *Buy Telegram Stars*\n\n"
                f"Telegram Stars are a universal currency for bots and mini apps.\n"
                f"You can use them to purchase:\n"
                f"- ü§ñ ChatGPT tokens\n"
                f"- üåÑ DALL-E image generations\n"
                f"- üåÖ Stable Diffusion image generations\n"
                f"- üñºÔ∏è MidJourney image generations\n\n"
                f"To purchase stars, click the button below:", 
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            await message.answer(f"Error with stars purchase: {str(e)}")
    
    async def paysupport_handler(self, message: Message):
        try:
            await message.answer(
                "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞—Ö:\n\n"
                "1. –í—Å–µ –ø–æ–∫—É–ø–∫–∏ –∑–∞ –∑–≤–µ–∑–¥—ã Telegram —è–≤–ª—è—é—Ç—Å—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–º–∏.\n"
                "2. –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö.\n"
                "3. –î–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–≤–µ–∑–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –±–æ—Ç–∞.\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!"
            )
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            raise err
    
    async def check_stars_balance_handler(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥ Telegram"""
        try:
            await callback_query.answer()
            user_id = callback_query.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                balance = await self.telegram_stars.get_user_stars_balance(user_id)
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üõçÔ∏è Buy stars", callback_data="buy_stars")],
                    [types.InlineKeyboardButton(text="üîô Back", callback_data="back_to_menu")]
                ])
                
                await callback_query.message.edit_text(
                    f"üí´ *Your stars balance: {balance} stars*\n\n"
                    "Stars are a universal currency for bots and mini apps.",
                    reply_markup=keyboard
                )
            except TelegramStarsError as e:
                # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üõçÔ∏è Buy stars", callback_data="buy_stars")],
                    [types.InlineKeyboardButton(text="üîô Back", callback_data="back_to_menu")]
                ])
                
                await callback_query.message.edit_text(
                    "‚ùå Failed to get stars balance. Please try again later.\n\n"
                    "You can buy Telegram Stars through the official interface.",
                    reply_markup=keyboard
                )
                
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            raise err
    
    async def pay_with_stars_handler(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥ –∑–≤–µ–∑–¥–∞–º–∏ Telegram"""
        try:
            await callback_query.answer()
            user_id = callback_query.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏–∑ callback data
            data = callback_query.data
            product_type = data.replace("pay_stars_", "")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
            product_info = {
                "chatgpt": {"name": "100K ChatGPT —Ç–æ–∫–µ–Ω–æ–≤", "price": 20, "amount": 100000},
                "dall_e": {"name": "50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π DALL¬∑E", "price": 20, "amount": 50},
                "stable": {"name": "50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π Stable Diffusion", "price": 20, "amount": 50},
                "midjourney": {"name": "50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π MidJourney", "price": 20, "amount": 50}
            }
            
            if product_type not in product_info:
                await callback_query.message.edit_text("‚ùå Unknown product type.")
                return
                
            product = product_info[product_type]
            price = product["price"]
            name = product["name"]
            amount = product["amount"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                balance = await self.telegram_stars.get_user_stars_balance(user_id)
                
                if balance < price:
                    # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥
                    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="üõçÔ∏è Buy stars", callback_data="buy_stars")],
                        [types.InlineKeyboardButton(text="üîô Back", callback_data="back_to_menu")]
                    ])
                    
                    await callback_query.message.edit_text(
                        f"‚ùå Not enough stars to buy {name}.\n\n"
                        f"Cost: {price} stars\n"
                        f"Your balance: {balance} stars\n\n"
                        "You can buy more stars through the official Telegram interface.",
                        reply_markup=keyboard
                    )
                    return
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–µ–∑–¥
                invoice_id = await self.telegram_stars.deduct_stars(user_id, price, f"–ü–æ–∫—É–ø–∫–∞ {name}")
                
                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–ø–∏—Å–∞–Ω–∏—è
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üîÑ Check status", callback_data=f"check_payment_{invoice_id}")],
                    [types.InlineKeyboardButton(text="üîô Back", callback_data="back_to_menu")]
                ])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback_query.message.edit_text(
                    f"üîÑ Processing purchase of {name}...\n\n"
                    f"Cost: {price} stars\n"
                    "Please wait while the operation is completed.",
                    reply_markup=keyboard
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
                if product_type == "chatgpt":
                    current_balance = await self.database.get_chatgpt(user_id)
                    await self.database.set_chatgpt(user_id, current_balance + amount)
                elif product_type == "dall_e":
                    current_balance = await self.database.get_dalle(user_id)
                    await self.database.set_dalle(user_id, current_balance + amount)
                elif product_type == "stable":
                    current_balance = await self.database.get_stable(user_id)
                    await self.database.set_stable(user_id, current_balance + amount)
                elif product_type == "midjourney":
                    current_balance = await self.database.get_midjourney(user_id)
                    await self.database.set_midjourney(user_id, current_balance + amount)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
                await callback_query.message.edit_text(
                    f"‚úÖ Congratulations! You have successfully purchased {name}.\n\n"
                    f"Deducted: {price} stars\n"
                    f"Current stars balance: {balance - price} stars",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="üîô Back to menu", callback_data="back_to_menu")]
                    ])
                )
                
            except TelegramStarsError as e:
                # –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∑–≤–µ–∑–¥
                await callback_query.message.edit_text(
                    f"‚ùå Payment error: {str(e)}\n\n"
                    "Please try again or contact support.",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="üîô Back", callback_data="back_to_menu")]
                    ])
                )
                
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            raise err

    async def back_to_menu_handler(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        try:
            await callback_query.answer()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üí¨ Chat plans", callback_data="show_chat_plans")],
                [types.InlineKeyboardButton(text="üñº Image plans", callback_data="show_image_plans")],
                [types.InlineKeyboardButton(text="üí´ My stars balance", callback_data="stars_balance")]
            ])
            
            await callback_query.message.edit_text(
                "Select an action:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            raise err
    
    async def check_payment_status_handler(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            await callback_query.answer()
            
            # –ü–æ–ª—É—á–∞–µ–º ID –∏–Ω–≤–æ–π—Å–∞ –∏–∑ callback data
            data = callback_query.data
            invoice_id = data.replace("check_payment_", "")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                payment_status = await self.telegram_stars.check_payment_status(invoice_id)
                
                if payment_status['status'] == 'completed':
                    # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω
                    await callback_query.message.edit_text(
                        "‚úÖ Payment successfully completed!\n\n"
                        "Your balance has been updated.",
                        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                            [types.InlineKeyboardButton(text="üîô Back to menu", callback_data="back_to_menu")]
                        ])
                    )
                elif payment_status['status'] == 'pending':
                    # –ü–ª–∞—Ç–µ–∂ –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
                    await callback_query.message.edit_text(
                        "‚è≥ Payment is still being processed...\n\n"
                        "Please check the status later.",
                        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                            [types.InlineKeyboardButton(text="üîÑ Check again", callback_data=f"check_payment_{invoice_id}")],
                            [types.InlineKeyboardButton(text="üîô Back", callback_data="back_to_menu")]
                        ])
                    )
                else:
                    # –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
                    await callback_query.message.edit_text(
                        f"‚ùå Payment error: {payment_status['status']}\n\n"
                        "Please try again or contact support.",
                        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                            [types.InlineKeyboardButton(text="üîô Back", callback_data="back_to_menu")]
                        ])
                    )
            except TelegramStarsError as e:
                # –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
                await callback_query.message.edit_text(
                    f"‚ùå Failed to check payment status: {str(e)}\n\n"
                    "Please try again later.",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="üîô Back", callback_data="back_to_menu")]
                    ])
                )
                
        except Exception as e:
            err = TelegramError(str(e))
            err.output()
            raise err
