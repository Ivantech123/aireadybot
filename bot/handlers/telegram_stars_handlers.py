from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from telegram.ext import ContextTypes, ConversationHandler
import logging
import asyncio
import time

from bot.services.telegram_stars_service import TelegramStarsService
from bot.services.user_service import UserService
from bot.services.subscription_service import SubscriptionService
from database.models import SubscriptionPlan
from database.db import get_session

logger = logging.getLogger(__name__)

# Conversation states
TELEGRAM_STARS_MENU, TELEGRAM_STARS_PURCHASE = range(2)

async def telegram_stars_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle /stars command"""
    user = update.effective_user
    
    # Get user's Telegram Stars balance
    balance = await TelegramStarsService.get_stars_balance(user.id)
    
    # Create keyboard with options
    keyboard = [
        [InlineKeyboardButton("‚≠êÔ∏è –ö—É–ø–∏—Ç—å Telegram Stars", callback_data="buy_telegram_stars")],
        [InlineKeyboardButton("üìä –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="check_telegram_stars_balance")]
    ]
    
    # Show balance if available
    if balance and hasattr(balance, 'balance'):
        await update.message.reply_text(
            f"‚≠êÔ∏è –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{balance.balance}* –∑–≤–µ–∑–¥ Telegram\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            "‚≠êÔ∏è *Telegram Stars*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    
    return TELEGRAM_STARS_MENU

async def telegram_stars_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle Telegram Stars menu selection"""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    
    if callback_data == "buy_telegram_stars":
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –ø–æ–∫—É–ø–∫–µ –∑–≤–µ–∑–¥ Telegram
        message_text = (
            "üåü *–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ Telegram* üåü\n\n"
            "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ Telegram:\n\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Telegram\n"
            "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥\n"
            "3Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–æ–∫—É–ø–∫—É, —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —ç—Ç–æ—Ç —á–∞—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∫—É–ø–∫—É'."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        keyboard = [
            [InlineKeyboardButton("üí´ –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã Telegram", url="https://t.me/stars/buy")],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∫—É–ø–∫—É", callback_data="check_stars_purchase")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_stars_menu")]
        ]
        
        await query.edit_message_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
        return TELEGRAM_STARS_MENU
        
    elif callback_data == "check_stars_purchase":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∫—É–ø–∫–∏
        await query.edit_message_text(
            "üîÑ *–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ Telegram...*",
            parse_mode="Markdown"
        )
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(2)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = update.effective_user
        balance = await TelegramStarsService.get_stars_balance(user.id)
        
        if balance and hasattr(balance, 'balance'):
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
            success_message = (
                "‚úÖ *–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!* ‚úÖ\n\n"
                f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{balance.balance}* –∑–≤–µ–∑–¥ Telegram\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–ª–∞–Ω—ã."
            )
            
            keyboard = [
                [InlineKeyboardButton("üìä –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="check_telegram_stars_balance")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_stars_menu")]
            ]
            
            await query.edit_message_text(
                success_message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å
            error_message = (
                "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∫—É–ø–∫—É* ‚ùå\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ü–æ–∫—É–ø–∫–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                "‚Ä¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            )
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_stars_purchase")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_stars_menu")]
            ]
            
            await query.edit_message_text(
                error_message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        
        return TELEGRAM_STARS_MENU
    
    elif callback_data == "check_telegram_stars_balance":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
        await query.edit_message_text(
            "üîÑ *–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥ Telegram...*",
            parse_mode="Markdown"
        )
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(1)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = update.effective_user
        balance = await TelegramStarsService.get_stars_balance(user.id)
        
        if balance and hasattr(balance, 'balance'):
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–æ–º
            balance_message = (
                "üìä *–ë–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥ Telegram* üìä\n\n"
                f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{balance.balance}* –∑–≤–µ–∑–¥ Telegram\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–ª–∞–Ω—ã –∏–ª–∏ –ø–æ–∫—É–ø–∫–∏ –¥—Ä—É–≥–∏—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥."
            )
            
            keyboard = [
                [InlineKeyboardButton("‚≠êÔ∏è –ö—É–ø–∏—Ç—å –µ—â–µ –∑–≤–µ–∑–¥", callback_data="buy_telegram_stars")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_stars_menu")]
            ]
            
            await query.edit_message_text(
                balance_message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å
            error_message = (
                "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å* ‚ùå\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥ Telegram.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
            )
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_telegram_stars_balance")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_stars_menu")]
            ]
            
            await query.edit_message_text(
                error_message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        
        return TELEGRAM_STARS_MENU
    
    elif callback_data == "back_to_stars_menu":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–≤–µ–∑–¥
        user = update.effective_user
        balance = await TelegramStarsService.get_stars_balance(user.id)
        
        # Create keyboard with options
        keyboard = [
            [InlineKeyboardButton("‚≠êÔ∏è –ö—É–ø–∏—Ç—å Telegram Stars", callback_data="buy_telegram_stars")],
            [InlineKeyboardButton("üìä –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="check_telegram_stars_balance")]
        ]
        
        # Show balance if available
        if balance and hasattr(balance, 'balance'):
            await query.edit_message_text(
                f"‚≠êÔ∏è –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: *{balance.balance}* –∑–≤–µ–∑–¥ Telegram\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        else:
            await query.edit_message_text(
                "‚≠êÔ∏è *Telegram Stars*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
        
        return TELEGRAM_STARS_MENU
    
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É
    await query.edit_message_text(
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        reply_markup=None
    )
    
    return ConversationHandler.END

async def create_stars_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Create a Telegram Stars invoice"""
    try:
        # Get command arguments
        args = update.message.text.split()[1:]
        
        if not args:
            await update.message.reply_text(
                "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.\n\n"
                "–ü—Ä–∏–º–µ—Ä: /buy_stars 10"
            )
            return
        
        try:
            amount = int(args[0])
            if amount <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        except ValueError as e:
            await update.message.reply_text(
                f"‚ùóÔ∏è –û—à–∏–±–∫–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
            )
            return
        
        # Get user info
        user = update.effective_user
        user_id = user.id
        
        # Create invoice parameters
        title = f"–ü–æ–∫—É–ø–∫–∞ {amount} –∑–≤–µ–∑–¥"
        description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} –∑–≤–µ–∑–¥ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ"
        
        # Call service to prepare invoice
        invoice_result = await TelegramStarsService.deduct_stars(user_id, amount, description="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
        
        if not invoice_result['success']:
            await update.message.reply_text(
                f"‚ùóÔ∏è –û—à–∏–±–∫–∞: {invoice_result['message']}"
            )
            return
        
        # Get invoice parameters
        invoice_params = invoice_result['invoice_params']
        
        # Store payload in context for verification in pre_checkout_callback
        context.user_data['payment_payload'] = invoice_params['payload']
        
        # Send invoice to user
        await context.bot.send_invoice(
            chat_id=update.effective_chat.id,
            title=invoice_params['title'],
            description=invoice_params['description'],
            payload=invoice_params['payload'],
            provider_token=None,  # Not needed for Telegram Stars
            currency=invoice_params['currency'],
            prices=invoice_params['prices'],
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False,
            protect_content=False,
            send_email_to_provider=False,
            max_tip_amount=0,
            suggested_tip_amounts=[],
            provider_data=None,
            photo_url=None,
            photo_size=0,
            photo_width=0,
            photo_height=0,
            start_parameter=None
        )
        
        logger.info(f"Sent stars invoice to user {user_id} for {amount} stars")
        
    except Exception as e:
        error_message = str(e)
        logger.error(f"Error creating stars invoice: {error_message}")
        logger.error(str(error_message))
        await update.message.reply_text(
            f"‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

# Pre-checkout callback handler
async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle the pre-checkout callback"""
    query = update.pre_checkout_query
    
    try:
        # Verify that the payload matches what we sent
        stored_payload = context.user_data.get('payment_payload')
        
        if stored_payload and query.invoice_payload == stored_payload:
            logger.info(f"Pre-checkout query from user {query.from_user.id} verified successfully")
            # Accept the payment
            await query.answer(ok=True)
        else:
            logger.warning(f"Invalid payload in pre-checkout query from user {query.from_user.id}")
            logger.warning(f"Expected: {stored_payload}, Got: {query.invoice_payload}")
            # Reject the payment
            await query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞")
    
    except Exception as e:
        error_message = str(e)
        logger.error(f"Error in pre-checkout callback: {error_message}")
        logger.error(str(error_message))
        # Reject the payment
        await query.answer(ok=False, error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")

# Successful payment callback handler
async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle successful payment"""
    try:
        payment = update.message.successful_payment
        user = update.effective_user
        user_id = user.id
        
        logger.info(f"Received successful payment from user {user_id}: {payment.total_amount / 100} {payment.currency}")
        
        # Process the payment using the service
        result = await TelegramStarsService.process_successful_payment(user_id, payment)
        
        if result['success']:
            # Determine message based on payment type
            if result.get('payment_type') == 'subscription':
                # This was a subscription payment
                subscription_info = result.get('subscription_info', {})
                plan_name = subscription_info.get('plan_name', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–ª–∞–Ω')
                expiry_date = subscription_info.get('expiry_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                daily_limit = subscription_info.get('daily_limit', 0)
                
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n" 
                    f"‚Ä¢ –ü–ª–∞–Ω: {plan_name}\n"
                    f"‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiry_date}\n"
                    f"‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ª–∏–º–∏—Ç: {daily_limit} –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞."
                )
            else:
                # This was a regular stars purchase
                amount = result.get('amount', payment.total_amount / 100)
                
                # Get updated balance
                balance_info = await TelegramStarsService.get_stars_balance(user_id)
                current_balance = balance_info.balance if balance_info and hasattr(balance_info, 'balance') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                
                await update.message.reply_text(
                    f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞!\n\n"
                    f"‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {amount} –∑–≤–µ–∑–¥\n"
                    f"‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance} –∑–≤–µ–∑–¥\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–ª–∞–Ω—ã –∏–ª–∏ –ø–æ–∫—É–ø–∫–∏ –¥—Ä—É–≥–∏—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥."
                )
        else:
            # Payment processing failed
            await update.message.reply_text(
                f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {result['message']}"
            )
    
    except Exception as e:
        error_message = str(e)
        logger.error(f"Error in successful payment callback: {error_message}")
        logger.error(str(error_message))
        await update.message.reply_text(
            "‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )

# Check stars purchase handler
async def check_stars_purchase_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle check stars purchase button click"""
    query = update.callback_query
    await query.answer()
    
    # Get user ID
    user = update.effective_user
    telegram_id = user.id
    
    # Show loading animation
    loading_message = "‚è≥Ô∏è *–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥...*"
    await query.edit_message_text(
        loading_message,
        parse_mode="Markdown"
    )
    
    # Wait a bit to simulate checking
    await asyncio.sleep(2)
    
    # Get stars balance
    stars_balance = await TelegramStarsService.get_stars_balance(telegram_id)
    
    if stars_balance and hasattr(stars_balance, 'balance'):
        # Get user_id
        user_id = await UserService.get_or_create_user_id(
            telegram_id=telegram_id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # Get internal stars balance
        internal_stars = await UserService.get_user_stars(user_id)
        
        # Create keyboard for subscription
        keyboard = [
            [InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞–Ω–∞", callback_data="subscription_menu")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="cancel_subscription")]
        ]
        
        # Show balance information
        await query.edit_message_text(
            f"üí∏ *–ë–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥* üí∏\n\n"
            f"Telegram Stars: *{stars_balance.balance}* –∑–≤–µ–∑–¥\n"
            f"–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å: *{internal_stars}* –∑–≤–µ–∑–¥\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    else:
        # If failed to get balance, show error message
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_stars_purchase")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="cancel_subscription")]
        ]
        
        await query.edit_message_text(
            "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥ Telegram*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    
    return ConversationHandler.END
