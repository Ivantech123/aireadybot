import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler, MessageHandler, filters

from bot.keyboards.keyboards import get_main_keyboard, get_admin_keyboard, get_back_keyboard
from bot.services.admin_service import AdminService
from bot.services.user_service import UserService
from config.config import ADMIN_USER_ID

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Conversation states
ADMIN_MENU, BROADCAST_MESSAGE, BROADCAST_CONFIRM, EDIT_AD, MANAGE_USERS, FREE_LIMITS_SETTINGS, FREE_LIMITS_UPDATE = range(3, 10)

# Admin menu handler
async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle admin menu options"""
    query = update.callback_query
    
    if query:
        await query.answer()
        callback_data = query.data
        
        if callback_data == "admin_broadcast":
            await query.edit_message_text(
                "üì£ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
                reply_markup=get_back_keyboard()
            )
            return BROADCAST_MESSAGE
        
        elif callback_data == "admin_edit_ad":
            # Get current advertisement
            ad_text = await AdminService.get_advertisement()
            
            await query.edit_message_text(
                f"üìù –¢–µ–∫—É—â–∏–π —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{ad_text or '–ù–µ—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞'}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç:",
                reply_markup=get_back_keyboard()
            )
            return EDIT_AD
        
        elif callback_data == "admin_manage_users":
            await query.edit_message_text(
                "üë• –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                reply_markup=get_back_keyboard()
            )
            return MANAGE_USERS
            
        elif callback_data == "admin_free_limits":
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
            from bot.services.admin_service import AdminService
            settings = await AdminService.get_free_message_settings()
            
            await query.edit_message_text(
                f"üéÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤:\n\n"
                f"üìù –ù–∞—á–∞–ª—å–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {settings['initial_free_text']}\n"
                f"üñº –ù–∞—á–∞–ª—å–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {settings['initial_free_images']}\n"
                f"üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {settings['daily_free_messages']}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="edit_free_limits")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
                ])
            )
            return FREE_LIMITS_SETTINGS
        
        elif callback_data == "admin_back":
            await query.edit_message_text(
                "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=get_main_keyboard()
            )
            return ConversationHandler.END
    
    return ADMIN_MENU

# Broadcast message handler
async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle broadcast message input"""
    message_text = update.message.text
    
    if message_text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    # Store message text in context
    context.user_data['broadcast_message'] = message_text
    
    # Create confirm keyboard
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_broadcast")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_broadcast")]
    ]
    
    await update.message.reply_text(
        f"üì£ –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n{message_text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return BROADCAST_CONFIRM

# Broadcast confirm handler
async def broadcast_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle broadcast confirmation"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "confirm_broadcast":
        # Get message from context
        message_text = context.user_data.get('broadcast_message', '')
        
        if not message_text:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=None
            )
            return ADMIN_MENU
        
        # Send broadcast message
        success, count = await AdminService.send_broadcast_message(message_text, context.bot)
        
        if success:
            await query.edit_message_text(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
                reply_markup=None
            )
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                reply_markup=None
            )
        
        # Clear context
        if 'broadcast_message' in context.user_data:
            del context.user_data['broadcast_message']
        
        # Return to admin menu
        await query.message.reply_text(
            "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    elif query.data == "cancel_broadcast":
        # Clear context
        if 'broadcast_message' in context.user_data:
            del context.user_data['broadcast_message']
        
        await query.edit_message_text(
            "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=None
        )
        
        # Return to admin menu
        await query.message.reply_text(
            "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU

# Edit advertisement handler
async def edit_ad(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle advertisement edit"""
    ad_text = update.message.text
    
    if ad_text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    # Update advertisement
    success = await AdminService.update_advertisement(ad_text)
    
    if success:
        await update.message.reply_text(
            "‚úÖ –†–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.",
            reply_markup=get_admin_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.",
            reply_markup=get_admin_keyboard()
        )
    
    return ADMIN_MENU

# Manage users handler
async def manage_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle user management"""
    user_id_text = update.message.text
    
    if user_id_text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU
    
    try:
        telegram_id = int(user_id_text)
        
        # Get user info using the new method that doesn't return detached objects
        user_info = await UserService.get_user_info_by_telegram_id(telegram_id)
        
        if not user_info:
            await update.message.reply_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_admin_keyboard()
            )
            return ADMIN_MENU
        
        # Get user limits
        user_limits = await UserService.get_user_limits(user_info['id'])
        
        # Get user stars
        stars = await UserService.get_user_stars(user_info['id'])
        
        # Create user management keyboard
        from bot.keyboards.keyboards import get_user_management_keyboard_admin
        keyboard = get_user_management_keyboard_admin(user_info['id'])
        
        await update.message.reply_text(
            f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
            f"ID: {user_info['id']}\n"
            f"Telegram ID: {user_info['telegram_id']}\n"
            f"–ò–º—è: {user_info['first_name']} {user_info['last_name'] or ''}\n"
            f"Username: {user_info['username'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–ó–≤—ë–∑–¥—ã: {stars}\n\n"
            f"–õ–∏–º–∏—Ç—ã:\n"
            f"–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {user_limits.text_messages_used}/{user_limits.text_messages_limit}\n"
            f"–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {user_limits.voice_messages_used}/{user_limits.voice_messages_limit}\n"
            f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {user_limits.image_generations_used}/{user_limits.image_generations_limit}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        
        return ADMIN_MENU
    
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU

# User management actions handler
async def user_management_actions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle user management actions"""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    
    if callback_data.startswith("add_stars_"):
        user_id = int(callback_data.split("_")[-1])
        
        # Add 50 stars to user
        success = await UserService.add_stars(user_id, 50)
        
        if success:
            # Get updated stars
            stars = await UserService.get_user_stars(user_id)
            
            await query.edit_message_text(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ 50 –∑–≤—ë–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {stars} –∑–≤—ë–∑–¥.",
                reply_markup=None
            )
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–≤—ë–∑–¥.",
                reply_markup=None
            )
    
    elif callback_data.startswith("reset_limits_"):
        user_id = int(callback_data.split("_")[-1])
        
        # Reset user limits
        success = await UserService.reset_user_limits(user_id)
        
        if success:
            await query.edit_message_text(
                "‚úÖ –õ–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–±—Ä–æ—à–µ–Ω—ã.",
                reply_markup=None
            )
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ª–∏–º–∏—Ç–æ–≤.",
                reply_markup=None
            )
    
    # Return to admin menu
    await query.message.reply_text(
        "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
        reply_markup=get_admin_keyboard()
    )
    return ADMIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
async def free_limits_settings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle free limits settings"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "edit_free_limits":
        await query.edit_message_text(
            "üîÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "<–Ω–∞—á–∞–ª—å–Ω—ã–µ_—Å–æ–æ–±—â–µ–Ω–∏—è>,<–Ω–∞—á–∞–ª—å–Ω—ã–µ_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è>,<–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ_—Å–æ–æ–±—â–µ–Ω–∏—è>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 5,3,1",
            reply_markup=get_back_keyboard()
        )
        return FREE_LIMITS_UPDATE
    
    elif query.data == "admin_back":
        await query.edit_message_text(
            "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
        return ADMIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
async def update_free_limits_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle updating free limits settings"""
    message = update.message.text.strip()
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        values = message.split(',')
        if len(values) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            
        initial_text = int(values[0])
        initial_images = int(values[1])
        daily_messages = int(values[2])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ
        if initial_text < 0 or initial_images < 0 or daily_messages < 0:
            raise ValueError("–ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        from bot.services.admin_service import AdminService
        success = await AdminService.update_free_message_settings(
            initial_text, initial_images, daily_messages
        )
        
        if success:
            await update.message.reply_text(
                "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
                ])
            )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="edit_free_limits")],
                    [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
                ])
            )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–Ω–∞—á–∞–ª—å–Ω—ã–µ_—Å–æ–æ–±—â–µ–Ω–∏—è>,<–Ω–∞—á–∞–ª—å–Ω—ã–µ_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è>,<–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ_—Å–æ–æ–±—â–µ–Ω–∏—è>",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="edit_free_limits")],
                [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
            ])
        )
    
    return FREE_LIMITS_SETTINGS

# Check if user is admin
async def is_admin(update: Update) -> bool:
    """Check if the user is an admin"""
    user = update.effective_user
    return user.id == ADMIN_USER_ID
